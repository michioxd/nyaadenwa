!function(){"use strict";const t=3e3,s=2700,e=6e3,n=new Float32Array(e);for(let o=0;o<3e3;o+=1){const t=Math.sin(o/e*Math.PI);n[o]=t,n[e-o-1]=t}class h extends AudioWorkletProcessor{channelCount;#t;#s=[];#e=[];#n=0;#h=!0;#o=!1;#r=0;#i=0;#u=0;constructor(t){super(),this.channelCount=t.outputChannelCount[0],this.#t=new Float32Array(this.channelCount),this.port.onmessage=t=>{for(;this.#n>16800;){this.#s.shift();const t=this.#e.shift();this.#n-=t}const s=t.data,[e,n]=this.createSource(s);this.#s.push(e),this.#e.push(n),this.#n+=n,!this.#o&&this.#n>12e3&&(this.#o=!0,this.#r=0,this.#i=0,this.#u=0)}}process(h,[o]){if(this.#h){if(this.#n<4800)return!0;this.#h=!1}this.#o&&this.#n<7200&&(this.#o=!1,this.#h=!0);const r=o[0].length;if(this.#o){for(let i=0;i<r;i+=1){let h=0;const r=Math.max(0,Math.floor((this.#u-e)/s)+1);let u=this.#u-r*s,a=r*t+u;for(;a>0&&u>=0;){this.#a(a-this.#r);const t=n[u];for(let s=0;s<this.channelCount;s+=1)o[s][i]+=this.#t[s]*t;h+=t,a+=300,u-=s}if(h>0)for(let t=0;t<this.channelCount;t+=1)o[t][i]/=h;this.#u+=1,r>0&&(this.#u-=s,this.#r-=t,this.#i+=299.99999999999994)}this.#i+=r;const h=this.#e[0];void 0!==h&&this.#i>=h&&(this.#s.shift(),this.#e.shift(),this.#n-=h,this.#r+=h,this.#i-=h)}else this.#l(o);return!0}#l(t){let s=0;const e=t[0].length;for(;this.#s.length>0&&s<e;){let n=this.#s[0],h=0;if([n,h,s]=this.copyChunk(n,t,e,s),this.#n-=h,n)return this.#s[0]=n,void(this.#e[0]-=h);this.#s.shift(),this.#e.shift()}}#a(t){for(let s=0;s<this.#s.length;s+=1){const e=this.#e[s];if(t<e)return void this.read(this.#s[s],t,this.#t);t-=e}this.#t.fill(0)}}registerProcessor("int16-source-processor",class extends h{createSource(t){const s=new Int16Array(t[0]);return[s,s.length/this.channelCount]}read(t,s,e){const n=s*this.channelCount;for(let h=0;h<this.channelCount;h+=1)e[h]=t[n+h]/32768}copyChunk(t,s,e,n){const h=t.length;let o=0;for(;o<h;){for(let e=0;e<this.channelCount;e+=1)s[e][n]=t[o]/32768,o+=1;if((n+=1)===e)return[o<h?t.subarray(o):void 0,o/this.channelCount,n]}return[void 0,o/this.channelCount,n]}}),registerProcessor("float32-source-processor",class extends h{createSource(t){const s=new Float32Array(t[0]);return[s,s.length/this.channelCount]}read(t,s,e){const n=s*this.channelCount;for(let h=0;h<this.channelCount;h+=1)e[h]=t[n+h]}copyChunk(t,s,e,n){const h=t.length;let o=0;for(;o<h;){for(let e=0;e<this.channelCount;e+=1)s[e][n]=t[o],o+=1;if((n+=1)===e)return[o<h?t.subarray(o):void 0,o/this.channelCount,n]}return[void 0,o/this.channelCount,n]}}),registerProcessor("float32-planer-source-processor",class extends h{createSource(t){const s=t.map((t=>new Float32Array(t)));return[s,s[0].length]}read(t,s,e){for(let n=0;n<e.length;n+=1)e[n]=t[n][s]}copyChunk(t,s,e,n){const h=t[0].length;let o=0;for(;o<h;){for(let e=0;e<this.channelCount;e+=1)s[e][n]=t[e][o];if(o+=1,(n+=1)===e)return[o<h?t.map((t=>t.subarray(o))):void 0,o,n]}return[void 0,o,n]}})}();
//# sourceMappingURL=worker-B58Y00b7.js.map
